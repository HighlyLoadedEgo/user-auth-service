"""init user tables

Revision ID: 0139b4ef8c97
Revises:
Create Date: 2024-05-28 16:11:52.088219

"""
from typing import (
    Sequence,
    Union,
)

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0139b4ef8c97"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "role",
        sa.Column("name", sa.String(), nullable=False, comment="Role name."),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_role")),
    )
    op.create_table(
        "user",
        sa.Column("email", sa.String(), nullable=False, comment="User email."),
        sa.Column("phone", sa.String(), nullable=False, comment="User phone number."),
        sa.Column("password", sa.String(), nullable=False, comment="User password."),
        sa.Column("name", sa.String(), nullable=False, comment="User name."),
        sa.Column(
            "middle_name", sa.String(), nullable=True, comment="User middle name."
        ),
        sa.Column("surname", sa.String(), nullable=False, comment="User surname."),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Access to UI Optional flag.",
        ),
        sa.Column("is_mail", sa.Boolean(), nullable=False, comment="Mailing flag."),
        sa.Column(
            "is_confirmed",
            sa.Boolean(),
            nullable=False,
            comment="Confirmed email flag.",
        ),
        sa.Column("role_id", sa.UUID(), nullable=True),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["role.id"],
            name=op.f("fk_user_role_id_role"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user")),
        sa.UniqueConstraint("email", name=op.f("uq_user_email")),
    )
    op.create_table(
        "company_information",
        sa.Column("name", sa.String(), nullable=False, comment="Company name."),
        sa.Column("role", sa.String(), nullable=False, comment="Role in a company."),
        sa.Column(
            "tin", sa.String(), nullable=False, comment="Taxpayer identification number"
        ),
        sa.Column(
            "rrc", sa.String(), nullable=False, comment="Registration reason code"
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_company_information_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_company_information")),
        sa.UniqueConstraint("user_id", name=op.f("uq_company_information_user_id")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("company_information")
    op.drop_table("user")
    op.drop_table("role")
    # ### end Alembic commands ###
